#+TITLE: Quick start（快速开始）

* Configuration（配置）                                   :TOC_4_gh:noexport:
 - [[#configuration-layers][Configuration Layers (配置层)]]
 - [[#dotfile-spacemacs][Dotfile (.spacemacs)]]
 - [[#dotdirectory-spacemacsd][Dotdirectory (~/.spacemacs.d)]]
 - [[#learning-spacemacs][Learning Spacemacs]]
   - [[#editing-styles][Editing Styles]]
   - [[#the-leader-keys][The leader keys]]
   - [[#evil-tutor][Evil-tutor]]
   - [[#universal-argument][Universal argument]]
   - [[#configuration-layers-and-package-discovery][Configuration layers and Package discovery]]
   - [[#key-bindings-discovery][Key bindings discovery]]
   - [[#describe-functions][Describe functions]]
 - [[#how-tos][How-To's]]

* Configuration Layers (配置层)
Spacemacs divides its configuration into self-contained units called
=configuration layers=. These layers are stacked on top of each other
to achieve a custom configuration.

Spacemacs 把它的配置拆分成叫做=配置层=的独立单元。这些层一个一个堆叠起来就组成了一个
自定义的配置。

By default Spacemacs uses a dotfile called =~/.spacemacs= to control which
layers to load. Within this file you can also configure certain features.

Spacemacs 默认使用一个叫做 =~/.spacemacs= 的 dotfile 去控制哪一个配置层会被加载。在
这个文件里你也可以对特定的功能进行配置。

A configuration layer is a directory containing at least a =packages.el=
file which defines and configures packages to be downloaded from Emacs
package repositories using the =package.el= built-in feature of Emacs.

一个配置层是至少包含了一个 =package.el= 文件的目录, 这个文件定义和配置了要通过 Emacs 内置
功能 =package.el= 从 Emacs 插件仓库下载的插件。

If you already have your own =Emacs= configuration you can move it to your
own layer.

如果你已经有了自己的 =Emacs= 配置， 你可以直接将它挪到你自己的 Spacemacs 配置层。

The following command creates a layer in the =private= directory:

下面这个命令可以在 =private= 文件夹里创建一个配置层：

#+BEGIN_EXAMPLE
    SPC : configuration-layer/create-layer RET
#+END_EXAMPLE

Any configuration layers you create must be explicitly loaded in =~/.spacemacs=.

你创建的任何配置层都要明确写在 =~/.spacemacs= 文件里。

Note: For your privacy, the contents of the =private= directory are not
under source control. See the section on private configuration management in
the [[file:DOCUMENTATION.org][documentation]].

注意：出于保护隐私的目的，=private= 目录下的内容不会纳入版本控制。详见 [[file:DOCUMENTATION.org][文档]] 里关于隐私配置管理的部分。

* Dotfile (.spacemacs)
As mentioned =.spacemacs= controls which configuration layers to load and
is also a means to customizing Spacemacs.

上文提到 =.spacemacs= 文件会控制加载哪个配置层；并且也是定制 Spacemacs 的一个方法。

The following command will create a =.spacemacs= file in your home directory:

下面这个命令可以在你的 home 目录创建一个 =.spacemacs= 文件：

#+BEGIN_EXAMPLE
    SPC : dotspacemacs/install RET
#+END_EXAMPLE

To open the installed dotfile:

打开刚才创建的 dotfile：

#+BEGIN_EXAMPLE
    SPC f e d
#+END_EXAMPLE

To load some configuration layers using the variable
=dotspacemacs-configuration-layers=:

通过 =dotspacemacs-configuration-layers= 这个变量加载配置层：

#+BEGIN_SRC elisp
;; List of configuration layers to load.
dotspacemacs-configuration-layers '(auto-completion smex)
#+END_SRC

Some configuration layers support configuration variables to expose granular
control over layer-specific features, [[file:../layers/+source-control/git/README.org][git layer]] being one such example.
Variables can be directly set within =dotspacemacs-configuration-layers= like so:

一些配置层支持配置变量来配置这个配置层特有的一些功能，我们用 [[file:../layers/+source-control/git/README.org][git 配置层]] 来举例。
配置层变量可以直接设置在 =dotspacemacs-configuration-layers= 里面，如下所示：

#+BEGIN_SRC elisp
;; List of configuration layers to load.
dotspacemacs-configuration-layers '(auto-completion
                                    (git :variables
                                         git-magit-status-fullscreen t)
                                    smex)
#+END_SRC

At anytime you can apply the changes made to the dotfile or layers
_without restarting_ Spacemacs by pressing ~SPC f e R~.

不管在任何时候你对 dotfile 或者配置层做了修改，都 _不需要重启_ Spacemacs, 只需按下 ~SPC f e R~.

The [[file:../core/templates/.spacemacs.template][dotfile template]] contain further information about how to customize
Spacemacs. See the dotfile configuration section of the [[file:DOCUMENTATION.org][documentation]] for
more details.

[[file:../core/templates/.spacemacs.template][dotfile 模版]] 里有关于如何自定义 Spacemacs 的更多信息。你可以在 [[file:DOCUMENTATION.org][文档]] 里的 dotfile 配置部分找到更多相关细节。

* Dotdirectory (~/.spacemacs.d)
Like =Emacs=, Spacemacs initialization can also be contained in an =init.el= file
in a special directory =~/.spacemacs.d=. The contents of the dotfile should be
then copied in the =init.el= file.

像 =Emacs= 一样，Spacemacs 的初始化也放在里一个特殊的目录 =~/.spacemacs.d= 下面的 =init.el= 文件里。
dotfile =~/.spacemacs= 的内容会被拷贝到 =init.el= 文件里。

The Emacs dotfile or dotdirectory is not replaced but rather
complemented by the Spacemacs dotfile or dotdirectory. During startup,
Emacs still uses =~/.emacs.d/init.el= (or =~/.emacs=) for its
initialization, and variable =user-emacs-directory= will still point
to =~/.emacs.d/=, even if =~/.spacemacs.d= or =~/.spacemacs= are
present. Only now =~/.emacs.d/init.el= is provided by Spacemacs
(e.g. after cloning the Spacemacs git repo into an empty
=~/.emacs.d/=), and your own personnal configurations go into
=~/.spacemacs.d/init.el= (or =~/.spacemacs=).

Spacemacs 并没有取代 Emacs 的 dotfile 和 dotdirectory ，而是对其进行了完善。
在程序启动期间，就算 =~/.spacemacs.d= 或者 =~/.spacemacs= 存在,
Emacs 还是用 =~/.emacs.d/init.el= (或者 =~/.emacs=) 进行初始化，而且变量
=user-emacs-directory= 还是指向 =~/.emacs.d/=。直到 Spacemacs 提供
=~/.emacs.d/init.el= （比如 clone Spacemacs 的 git 仓库到一个空的 =~/.emacs.d/= 目录），
然后你的个人配置就写在 =~/.spacemacs.d/init.el= (或者 =~/.spacemacs=).

Have a look into the FAQ for an easy workaround to maintain (your
former) vanilla Emacs and (your new) Spacemacs configurations
side-by-side without the need to rename and backup =~/.emacs.d/=.

你可以在 FAQ 里找到一个简单的解决方案可以让你不用重命名和备份 =~/.emacs.d/= ,
并维护你的 Emacs 和 Spacemacs 配置。(这段没翻译好)

* Learning Spacemacs（学习 Spacemacs）
** Editing Styles（编辑风格）
Spacemacs can be used by Vim users or Emacs users by setting the
=dotspacemacs-editing-style= variable to =vim=, =emacs= or even =hybrid=
in the dotfile =~/.spacemacs=.

Vim 党和 Emacs 党都可以使用 Spacemacs，只要将 =~/.spacemacs= 里的 =dotspacemacs-editing-style=
变量设置成 =vim=, =emacs= 甚至 =hybrid=。

** The leader keys
Spacemacs key bindings use a leader key which is by default bound to
~SPC~ (space bar) in =vim= or =hybrid= editing styles and ~M-m~ in =emacs=
style.

Spacemacs 默认的 leader key 在 =vim= 或 =hybrid= 风格下是 ~SPC~（空格），在
=emacs= 风格下是 ~M-m~.

You can change it by setting the variable =dotspacemacs-leader-key= if
you use the =vim= style or =dotspacemacs-emacs-leader-key= if you use
the =emacs= style (these variables must be set in the file =~/.spacemacs=).

你也可以自定义 learder key, 如果你用 =vim= 风格，请设置 =dotspacemacs-leader-key= 变量，
如果是 =emacs= 风格，请设置 =dotspacemacs-emacs-leader-key= 变量。（这些变量都要设置在 =~/.spacemacs= 文件里）

For simplicity the documentation always refers to the leader key as
~SPC~.

简便起见，本文档提到的 leader key 都是 ~SPC~.

There is secondary leader key called the major-mode leader key which is
set to ~​,​~ by default. This key is a shortcut for ~SPC m~
where all the major-mode specific commands are bound.

还有一个 secondary leader key 叫做 major-mode leader key, 默认是 ~,~.
这个键是 ~SPC m~ 的快捷键，这个下面有所有 major-mode 对应命令的键绑定。

** Evil-tutor （Evil 入门）
If you are willing to learn the Vim key bindings (highly recommended since
you can benefit from them even in =emacs= style), press ~SPC h T~
to begin an Evil-adapted Vimtutor.

如果你愿意学习 Vim 的键绑定（强烈推荐学习，就算你使用 =emacs= 风格也会受益匪浅），
通过 ~SPC h T~ 命令就可以开始学习一个适用于 Evil 的 Vim 入门教程。

** Universal argument
In =vim= editing style the universal argument defaults to ~SPC u~
instead of ~C-u~ because the latter is used to scroll up as in Vim.

在 =vim= 风格下，universal argument 默认是 ~SPC u~, 因为 ~C-u~ 在 Vim 里的作用是向上滚屏。

** Configuration layers and Package discovery（配置层和插件查找）
By using =helm-spacemacs-help= with ~SPC h SPC~ you can quickly search
for a package and get the name of the layers using it.

通过 ~SPC h SPC~ 调用 =helm-spacemacs-help=, 你可以快速查看一个插件和使用这个插件的配置层。

You can also easily go to the =README.org= of a layer or go to the initialization
function of a package.

你也可以很方便的查看一个配置层的 =README.org= 或者跳转到一个插件的初始化函数。

** Key bindings discovery（键绑定查找）
Thanks to [[https://github.com/justbur/emacs-which-key][which-key]], whenever a prefix command is pressed (like ~SPC~)
a buffer appears after one second listing the possible keys for this prefix.

感谢 [[https://github.com/justbur/emacs-which-key][which-key]], 当按下一个前缀命令键时（比如 ~SPC~ ), 1 秒后会弹出一个 buffer，
上面列出了这个前缀命令键后可以接的所有键位。

It is also possible to search for specific key bindings by pressing:

也可以查找特定的键绑定，如下所示：

#+BEGIN_EXAMPLE
    SPC ?
#+END_EXAMPLE

To narrow the bindings list to those prefixed with =SPC=,
type a pattern like this regular expression:

为了缩小跟在 =SPC= 后命令的查找范围，可以向下面这样输一个正则表达式：

#+BEGIN_EXAMPLE
    SPC\ b
#+END_EXAMPLE

which would list all =buffer= related bindings. *Note:* You are at the
/HELM-Descbind/ prompt, the pattern consists of 6 letters: uppercase ~SPC~, a
backslash, an actual space and a lowercase ~b~.

上面的查找会列出所有 =buffer= 相关的键绑定。*注意* 完成这个操作你要处在 /HELM-Descbind/ 的
提示界面（使用 ~SPC ?~），然后上面的正则表达式由六个字符组成，大写的 ~SPC~, 一个反斜线，一个
空格，和一个小写的 ~b~.

** Describe functions（描述函数）
=Describe functions= are powerful Emacs introspection commands to get information
about functions, variables, modes etc. These commands are bound thusly:

=Describe functions（描述函数）= 是 Emacs 里很强大的自省命令，可以得到函数，变量，模式等的信息。
这些命令的键绑定如下：

| 键绑定       | 描述    |
|-------------+---------|
| ~SPC h d f~ | 描述函数 |
| ~SPC h d k~ | 描述键位 |
| ~SPC h d m~ | 描述模式 |
| ~SPC h d v~ | 描述变量 |

* How-To's（我该如何做……）
Some quick =how-to's= are compiled in the [[file:FAQ.org::How%20do%20I...][FAQ.org]] file.

可以在 [[file:FAQ.org::How%20do%20I...][FAQ.org]] 里找到一些指导。
